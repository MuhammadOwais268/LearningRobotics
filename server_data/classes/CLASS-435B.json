{
    "Algorithm": {
        "levels": {
            "Education": {},
            "Serial Printing": {
                "description": ""
            }
        }
    },
    "Basic C++": {
        "levels": {
            "Basic Input/Output (I/O)": {
                "concept": {
                    "code": "#include <iostream>\n#include <string>\n\nint main() {\n    int userAge;\n    std::string userName;\n\n    std::cout << \"Please enter your name: \";\n    std::getline(std::cin, userName);\n\n    std::cout << \"Please enter your age: \";\n    std::cin >> userAge;\n\n    std::cout << \"\\nHello, \" << userName << \"!\" << std::endl;\n    std::cout << \"You are \" << userAge << \" years old.\" << std::endl;\n\n    return 0;\n}",
                    "explanation": "Explanation\n\nThis program interacts with the user by reading their input from the console.\n\nstd::cin is the standard character input stream (the keyboard).\n\nstd::getline(std::cin, userName);: This is the recommended way to read a full line of text, including spaces. It reads from std::cin and \n\nstores the result in the userName variable.\n\nstd::cin >> userAge;: The stream extraction operator >> reads data from the input and stores it in the variable. It stops reading when \n\nit encounters whitespace (like a space or newline), making it suitable for single words or numbers.\n",
                    "output": "Please enter your name: Jane Smith\nPlease enter your age: 30\n\nHello, Jane Smith!\nYou are 30 years old."
                },
                "description": "This program interacts with the user by reading their input from the console",
                "implementation": {
                    "code": "#include <Arduino.h>\n\n// Pin Definitions matching your wiring\n#define ENA 25\n#define IN1 14\n#define IN2 18\n#define ENB 26\n#define IN3 12\n#define IN4 5\n\nvoid setup() {\n  // Set all motor control pins to OUTPUT mode\n  pinMode(ENA, OUTPUT);\n  pinMode(IN1, OUTPUT);\n  pinMode(IN2, OUTPUT);\n  pinMode(ENB, OUTPUT);\n  pinMode(IN3, OUTPUT);\n  pinMode(IN4, OUTPUT);\n}\n\nvoid loop() {\n  // --- Move Forward ---\n  digitalWrite(IN1, HIGH);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, HIGH);\n  digitalWrite(IN4, LOW);\n  analogWrite(ENA, 200); // Set speed (0-255)\n  analogWrite(ENB, 200);\n  delay(2000);\n\n  // --- Stop ---\n  analogWrite(ENA, 0); // Speed = 0\n  analogWrite(ENB, 0);\n  delay(2000);\n\n  // --- Move Backward ---\n  digitalWrite(IN1, LOW);\n  digitalWrite(IN2, HIGH);\n  digitalWrite(IN3, LOW);\n  digitalWrite(IN4, HIGH);\n  analogWrite(ENA, 200);\n  analogWrite(ENB, 200);\n  delay(2000);\n\n  // --- Stop ---\n  analogWrite(ENA, 0);\n  analogWrite(ENB, 0);\n  delay(2000);\n}",
                    "explanation": "Concept: This level focuses on controlling the motors. It teaches how to configure the ESP32's pins as OUTPUTs using pinMode() and how to send signals to the motor driver with digitalWrite() (for direction) and analogWrite() (for speed).\n\nExplanation: We define all six motor control pins. In setup(), we declare them all as outputs. In the loop(), we create a simple sequence: move forward, stop, move backward, stop. We use digitalWrite() to set the IN pins to control direction and analogWrite() on the ENA/ENB pins to control the speed with a PWM signal."
                }
            },
            "Conditionals": {
                "concept": {
                    "code": "#include <iostream>\n\nint main() {\n    int score;\n    std::cout << \"Enter your test score (0-100): \";\n    std::cin >> score;\n\n    if (score >= 90) {\n        std::cout << \"You got an A!\" << std::endl;\n    }\n    else if (score >= 80) {\n        std::cout << \"You got a B.\" << std::endl;\n    }\n    else {\n        std::cout << \"You need to study more.\" << std::endl;\n    }\n\n    return 0;\n}",
                    "explanation": "Explanation\n\nThis program makes a decision based on the user's input.\n\nThe if statement checks a condition. If score >= 90 is true, its code block is executed, and the rest of the chain is skipped.\n\nIf the if condition is false, the program proceeds to the else if statement and checks its condition.\n\nThe else block is a catch-all. It executes only if all the preceding if and else if conditions in the chain were false. This creates a branching path in the program's logic.\n",
                    "output": "Enter your test score (0-100): 85\nYou got a B."
                },
                "description": "This program makes a decision based on users input",
                "implementation": {
                    "code": "#include <Arduino.h>\n#include <Wire.h>\n#include <VL53L0X.h>\n\n// Pins and motor functions from previous level\n#define ENA 25\n#define IN1 14\n#define IN2 18\n#define ENB 26\n#define IN3 12\n#define IN4 5\n\nVL53L0X sensor;\n\nvoid moveForward(int speed) { digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW); digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW); analogWrite(ENA, speed); analogWrite(ENB, speed); }\nvoid moveStop() { analogWrite(ENA, 0); analogWrite(ENB, 0); }\nvoid turnRight(int speed) { digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW); digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH); analogWrite(ENA, speed); analogWrite(ENB, speed); }\n\nvoid setup() {\n  Wire.begin();\n  pinMode(ENA, OUTPUT); pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT);\n  pinMode(ENB, OUTPUT); pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT);\n  sensor.setTimeout(500);\n  if (!sensor.init()) { while (1) {} }\n  sensor.startContinuous();\n}\n\nvoid loop() {\n  // SENSE: Read the distance\n  int distance = sensor.readRangeContinuousMillimeters();\n  bool isValidReading = !sensor.timeoutOccurred();\n\n  // THINK: Make a decision with an if-else statement\n  if (distance < 200 && isValidReading) {\n    // ACT: Obstacle is close, so turn\n    turnRight(180);\n    delay(500); // Turn for a fixed duration\n  } else {\n    // ACT: Path is clear, so move forward\n    moveForward(200);\n  }\n}",
                    "explanation": "Concept: This is where the robot gets \"smart.\" if-else statements allow the robot to make decisions. It checks the sensor reading and executes different functions based on the result.\nExplanation: The loop() now constantly reads the distance sensor. It uses an if statement to check if (distance < 200). If this condition is true (an obstacle is close), it runs the code inside the if block (stop and turn). If the condition is false, it runs the code inside the else block (move forward). This creates the core obstacle-avoiding behavior."
                }
            },
            "First C++ Program": {
                "concept": {
                    "code": "// Include the Input/Output Stream library\n#include <iostream>\n\n// All C++ programs start execution in the main function\nint main() {\n    // std::cout sends text to the console.\n    // << is the stream insertion operator.\n    // \"Hello, World!\" is the text to be printed.\n    // std::endl adds a new line and flushes the output.\n    std.cout << \"Hello, World!\" << std::endl;\n\n    // Return 0 to indicate that the program finished successfully.\n    return 0;\n}",
                    "explanation": "Code Explanation:\n#include <iostream>: Prepares your program to use tools for input and output.\n\nint main(): Defines the main function where the program begins. int means it will return an integer value when it's done.\n\nstd::cout: This is the \"standard character output\" stream, which usually means the console or terminal. The std:: part means cout is \n\nlocated in the standard (std) namespace.\n\n<<: The stream insertion operator. It \"inserts\" the data on its right into the stream on its left.\n\nstd::endl: Inserts a newline character, so the next output will start on a new line.\n\nreturn 0;: This is a status code sent to the operating system. A return value of 0 conventionally means \"everything went okay.\"",
                    "output": "Hello, World!"
                },
                "description": "Hello World it swas first ever written program",
                "implementation": {
                    "code": "#include <Arduino.h>\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n\n#define SCREEN_WIDTH 128\n#define SCREEN_HEIGHT 64\n\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);\n\nvoid setup() {\n  // Start I2C communication (required for the OLED)\n  Wire.begin();\n\n  // Initialize the display\n  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {\n    for (;;); // If it fails, halt the program\n  }\n\n  // --- Main Actions ---\n  display.clearDisplay();\n  display.setTextSize(2);\n  display.setTextColor(WHITE);\n  display.setCursor(10, 10);\n  display.println(\"Hello\");\n  display.println(\" Robot!\");\n  display.display(); // Push the text to the screen\n}\n\nvoid loop() {\n  // The screen is static, so nothing needs to be repeated here.\n}",
                    "explanation": "Concept: This is the \"Hello, World!\" of embedded systems. It teaches the basic structure of an Arduino/PlatformIO program (setup() and loop()) by initializing the OLED screen and displaying a static message.\nExplanation: The setup() function runs only once at the start. We use it to initialize the OLED display. We clear its memory, set the text size and color, position the cursor, and write \"Hello Robot!\". The display() command pushes this information to the screen. The loop() function is empty because we don't need to update the screen after the initial message."
                }
            },
            "Functions": {
                "concept": {
                    "code": "#include <iostream>\n\n// Function Declaration (Prototype)\nint add(int num1, int num2);\n\nint main() {\n    int a = 5;\n    int b = 7;\n\n    // Function Call\n    int sum = add(a, b);\n\n    std::cout << \"The sum is \" << sum << std::endl;\n    return 0;\n}\n\n// Function Definition\nint add(int num1, int num2) {\n    return num1 + num2;\n}```\n\n",
                    "explanation": "This program defines and uses a function to make the code more organized and reusable.\n\nFunction Declaration: int add(int num1, int num2); is a prototype that tells the compiler about the function before main uses it. It \nspecifies the function's name, the data types of its parameters (int, int), and its return type (int).\n\nFunction Call: In main, the line int sum = add(a, b); executes the function. The values of a and b are passed as arguments. The function's return value is captured in the sum variable.\n\nFunction Definition: This is the actual block of code that runs when the function is called. It takes the arguments, performs the addition, and uses the return keyword to send the result back to the caller.\n",
                    "output": "#### Expected Output\n```text\nThe sum is 12"
                },
                "description": "This program defines and uses a function to make the code more organized and reusable",
                "implementation": {
                    "code": "#include <Arduino.h>\n\n// Pin Definitions\n#define ENA 25\n#define IN1 14\n#define IN2 18\n#define ENB 26\n#define IN3 12\n#define IN4 5\n\n// A function to move the robot forward at a given speed\nvoid moveForward(int speed) {\n  digitalWrite(IN1, HIGH);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, HIGH);\n  digitalWrite(IN4, LOW);\n  analogWrite(ENA, speed);\n  analogWrite(ENB, speed);\n}\n\n// A function to stop both motors\nvoid moveStop() {\n  analogWrite(ENA, 0);\n  analogWrite(ENB, 0);\n}\n\n// A function to pivot the robot to the right\nvoid turnRight(int speed) {\n  digitalWrite(IN1, HIGH); // Left motor forward\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, LOW);  // Right motor backward\n  digitalWrite(IN4, HIGH);\n  analogWrite(ENA, speed);\n  analogWrite(ENB, speed);\n}\n\nvoid setup() {\n  pinMode(ENA, OUTPUT); pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT);\n  pinMode(ENB, OUTPUT); pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT);\n}\n\nvoid loop() {\n  // The loop is now much easier to read by calling functions\n  moveForward(200);\n  delay(2000);\n\n  moveStop();\n  delay(1000);\n\n  turnRight(180);\n  delay(1000);\n\n  moveStop();\n  delay(2000);\n}",
                    "explanation": "Concept: Making code cleaner and reusable by creating named blocks of code called functions. This avoids repetition and makes the main program logic much easier to read.\nExplanation: We take the repetitive blocks of digitalWrite and analogWrite calls from Level 3 and wrap them in functions like moveForward(int speed). Now, the loop() is very simple and readable. To make the robot move forward, we just call moveForward(200);. The int speed parameter makes the function flexible."
                }
            },
            "Loops": {
                "concept": {
                    "code": "#include <iostream>\n\nint main() {\n    // --- for loop ---\n    std::cout << \"--- For Loop ---\" << std::endl;\n    for (int i = 1; i <= 4; ++i) {\n        std::cout << \"Iteration number \" << i << std::endl;\n    }\n\n    // --- while loop ---\n    std::cout << \"\\n--- While Loop ---\" << std::endl;\n    int countdown = 3;\n    while (countdown > 0) {\n        std::cout << countdown << \"...\" << std::endl;\n        countdown = countdown - 1; // or countdown--;\n    }\n    std::cout << \"Lift off!\" << std::endl;\n\n    return 0;\n}",
                    "explanation": "Explanation\n\nThis program demonstrates the two most common types of loops.\n\nA for loop is ideal when you know exactly how many times you want to repeat an action. The statement for (int i = 1; i <= 4; ++i) does three things: 1) initializes i to 1, 2) sets the condition to loop as long as i is less than or equal to 4, and 3) increments i after each loop iteration.\n\nA while loop is used to repeat as long as a condition remains true. The loop checks while (countdown > 0) before each iteration. The value of countdown must be changed inside the loop to prevent it from running forever (an infinite loop).",
                    "output": "--- For Loop ---\nIteration number 1\nIteration number 2\nIteration number 3\nIteration number 4\n\n--- While Loop ---\n3...\n2...\n1...\nLift off!"
                },
                "description": "This program demonstrates the two most common types of loops",
                "implementation": {
                    "code": "#include <Arduino.h>\n#include <Wire.h>\n#include <VL53L0X.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n\n// Pin Definitions\n#define ENA 25\n#define IN1 14\n#define IN2 18\n#define ENB 26\n#define IN3 12\n#define IN4 5\n\n// Behavior Constants\n#define OBSTACLE_THRESHOLD 200\n#define NORMAL_SPEED 200\n#define TURN_SPEED 180\n\n// Hardware Objects\nVL53L0X sensor;\nAdafruit_SSD1306 display(128, 64, &Wire, -1);\n\n// Robot Action Functions\nvoid moveForward(int speed) { digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW); digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW); analogWrite(ENA, speed); analogWrite(ENB, speed); }\nvoid moveBackward(int speed) { digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH); digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH); analogWrite(ENA, speed); analogWrite(ENB, speed); }\nvoid turnRight(int speed) { digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW); digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH); analogWrite(ENA, speed); analogWrite(ENB, speed); }\nvoid moveStop() { analogWrite(ENA, 0); analogWrite(ENB, 0); }\n\nvoid setup() {\n  Wire.begin();\n  pinMode(ENA, OUTPUT); pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT);\n  pinMode(ENB, OUTPUT); pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT);\n  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { for(;;); }\n  sensor.setTimeout(500);\n  if (!sensor.init()) { while (1); }\n  sensor.startContinuous();\n}\n\nvoid loop() {\n  int distance = sensor.readRangeContinuousMillimeters();\n  bool isValidReading = !sensor.timeoutOccurred();\n\n  display.clearDisplay();\n  display.setTextColor(WHITE);\n  display.setTextSize(2);\n  display.setCursor(0, 0);\n  display.print(\"Dist: \");\n  display.print(distance);\n\n  if (distance < OBSTACLE_THRESHOLD && isValidReading) {\n    display.setCursor(0, 20);\n    display.print(\"OBSTACLE!\");\n    display.display();\n    \n    // Escape Maneuver\n    moveBackward(NORMAL_SPEED);\n    delay(300);\n    turnRight(TURN_SPEED);\n    \n    // Use a 'for' loop to blink a turning indicator\n    display.setTextSize(1);\n    for (int i = 0; i < 4; i++) {\n        display.setCursor(0, 40);\n        display.print(\"Turning...  \");\n        display.display();\n        delay(100);\n        display.setCursor(0, 40);\n        display.print(\"Turning... *\");\n        display.display();\n        delay(100);\n    } // The turn lasts for 4 * 200ms = 800ms\n    moveStop();\n    delay(100);\n  } else {\n    display.setCursor(0, 20);\n    display.print(\"All Clear\");\n    moveForward(NORMAL_SPEED);\n    display.display();\n  }\n  \n  delay(50);\n}",
                    "explanation": "Concept: This final program integrates all previous concepts and adds a for loop to create a more refined behavior. The for loop is used to repeat an action a specific number of times.\nExplanation: This version combines everything: sensor, motors, and OLED. When an obstacle is detected, the robot performs a more complex escape maneuver (back up, then turn). A for loop is used to blink a status message on the OLED screen multiple times while the robot is turning, providing clear visual feedback. This demonstrates a practical use for a loop inside the main loop()."
                }
            },
            "Variables & Datatypes": {
                "concept": {
                    "code": "#include <iostream>\n#include <string> // Required for using the string data type\n\nint main() {\n    int age = 25;\n    double temperature = 98.6;\n    char grade = 'A';\n    bool isStudent = true;\n    std::string name = \"John Doe\";\n\n    std::cout << \"Name: \" << name << std::endl;\n    std::cout << \"Age: \" << age << std::endl;\n    std::cout << \"Is a student? \" << isStudent << std::endl; // Prints 1 for true\n\n    return 0;\n}",
                    "explanation": "This program demonstrates how to declare and use variables of different fundamental types.\n\nA variable is a named storage location for data.\n\nint age = 25;: Declares an integer variable age to hold whole numbers.\n\ndouble temperature = 98.6;: Declares a double-precision floating-point variable temperature for numbers with decimal points.\n\nchar grade = 'A';: Declares a character variable grade to hold a single character (enclosed in single quotes).\n\nbool isStudent = true;: Declares a boolean variable isStudent which can only be true or false. When printed, true is output as 1 and \nfalse as 0.\n\nstd::string name = \"John Doe\";: Declares a string variable name for holding text (enclosed in double quotes). You must #include \n\n<string> to use it.\n",
                    "output": "Name: John Doe\nAge: 25\nIs a student? 1"
                },
                "description": "This program demonstrates how to declare and use variables of different fundamental types",
                "implementation": {
                    "code": "#include <Arduino.h>\n#include <Wire.h>\n#include <VL53L0X.h> // Include the Pololu sensor library\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n\n#define SCREEN_WIDTH 128\n#define SCREEN_HEIGHT 64\n\nVL53L0X sensor;\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);\n\n// A variable of datatype 'int' to store a whole number\nint distance_mm = 0; \n// A variable of datatype 'bool' to store a true/false value\nbool sensor_ok = false;\n\nvoid setup() {\n  Wire.begin();\n  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n\n  // Initialize the sensor and store the result in our boolean variable\n  sensor.setTimeout(500);\n  if (sensor.init()) {\n    sensor_ok = true;\n    sensor.startContinuous();\n  }\n  \n  // Display status based on the boolean variable's value\n  display.clearDisplay();\n  display.setTextSize(1);\n  display.setTextColor(WHITE);\n  display.setCursor(0, 0);\n  if (sensor_ok) {\n    display.println(\"Sensor... OK\");\n  } else {\n    display.println(\"Sensor... FAILED\");\n  }\n  display.display();\n  delay(2000);\n}\n\nvoid loop() {\n  // Store the latest sensor reading in our integer variable\n  distance_mm = sensor.readRangeContinuousMillimeters();\n\n  // Display the content of the variable on the screen\n  display.clearDisplay();\n  display.setTextSize(2);\n  display.setCursor(0, 0);\n  display.print(\"Dist:\");\n  display.setCursor(0, 20);\n  display.print(distance_mm); // This prints the number stored in the variable\n  display.print(\" mm\");\n  display.display();\n  \n  delay(100);\n}",
                    "explanation": "Concept: This level introduces variables as named containers for data. We use an int (integer) variable to store the distance from the sensor and a bool (true/false) variable to track the sensor's status, demonstrating how data can be stored, updated, and displayed.\nExplanation: We declare a global variable distance_mm of type int. In the loop(), we read the sensor's value and store the result in this variable. We then clear the OLED and print the text \"Dist:\" followed by the value currently stored inside distance_mm. This shows how a variable's content can change with each loop.\n"
                }
            }
        }
    },
    "OPP": {
        "levels": {}
    }
}